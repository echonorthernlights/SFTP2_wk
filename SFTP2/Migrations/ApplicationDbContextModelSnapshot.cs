// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SFTP2.Data;

#nullable disable

namespace SFTP2.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("SFTP2.Data.Entities.InFlow", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ArchivePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OutFlowId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ServerAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OutFlowId")
                        .IsUnique();

                    b.ToTable("InFlows");

                    b.HasData(
                        new
                        {
                            Id = "7e34ef79-03ec-4c9a-ba3b-a2458c8c76c3",
                            ArchivePath = "/archive/path",
                            OutFlowId = "8e4d4ee7-c189-4843-ac39-930eb81b3ec0",
                            ServerAddress = "sftp://example.com"
                        });
                });

            modelBuilder.Entity("SFTP2.Data.Entities.OutFlow", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("InFlowId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RemotePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ServerAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("OutFlows");

                    b.HasData(
                        new
                        {
                            Id = "8e4d4ee7-c189-4843-ac39-930eb81b3ec0",
                            InFlowId = "7e34ef79-03ec-4c9a-ba3b-a2458c8c76c3",
                            RemotePath = "/remote/path",
                            ServerAddress = "sftp://example.com"
                        });
                });

            modelBuilder.Entity("SFTP2.Data.Entities.InFlow", b =>
                {
                    b.HasOne("SFTP2.Data.Entities.OutFlow", "OutFlow")
                        .WithOne("InFlow")
                        .HasForeignKey("SFTP2.Data.Entities.InFlow", "OutFlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OutFlow");
                });

            modelBuilder.Entity("SFTP2.Data.Entities.OutFlow", b =>
                {
                    b.Navigation("InFlow")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
